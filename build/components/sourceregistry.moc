/****************************************************************************
** Meta object code from reading C++ file 'sourceregistry.h'
**
** Created: Sun Oct 27 15:10:40 2013
**      by: The Qt Meta Object Compiler version 63 (Qt 4.8.4)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include "../../components/sourceregistry.h"
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'sourceregistry.h' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 63
#error "This file was generated using the moc from 4.8.4. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

QT_BEGIN_MOC_NAMESPACE
static const uint qt_meta_data_Homerun__SourceRegistry[] = {

 // content:
       6,       // revision
       0,       // classname
       0,    0, // classinfo
       6,   14, // methods
       2,   44, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       1,       // signalCount

 // signals: signature, parameters, type, tag, flags
      25,   24,   24,   24, 0x05,

 // methods: signature, parameters, type, tag, flags
      97,   65,   56,   24, 0x02,
     152,   24,   56,   24, 0x02,
     193,  184,  176,   24, 0x02,
     228,  184,  223,   24, 0x02,
     280,  258,   56,   24, 0x02,

 // properties: name, type, flags
     336,  324, 0x08095401,
     351,  176, 0x0a495103,

 // properties: notify_signal_id
       0,
       0,

       0        // eod
};

static const char qt_meta_stringdata_Homerun__SourceRegistry[] = {
    "Homerun::SourceRegistry\0\0"
    "configFileNameChanged(QString)\0QObject*\0"
    "sourceId,sourceArguments,parent\0"
    "createModelFromArguments(QString,QVariantMap,QObject*)\0"
    "availableSourcesModel()\0QString\0"
    "sourceId\0visibleNameForSource(QString)\0"
    "bool\0isSourceConfigurable(QString)\0"
    "sourceId,groupVariant\0"
    "createConfigurationDialog(QString,QVariant)\0"
    "QVariantMap\0favoriteModels\0configFileName\0"
};

void Homerun::SourceRegistry::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        Q_ASSERT(staticMetaObject.cast(_o));
        SourceRegistry *_t = static_cast<SourceRegistry *>(_o);
        switch (_id) {
        case 0: _t->configFileNameChanged((*reinterpret_cast< const QString(*)>(_a[1]))); break;
        case 1: { QObject* _r = _t->createModelFromArguments((*reinterpret_cast< const QString(*)>(_a[1])),(*reinterpret_cast< const QVariantMap(*)>(_a[2])),(*reinterpret_cast< QObject*(*)>(_a[3])));
            if (_a[0]) *reinterpret_cast< QObject**>(_a[0]) = _r; }  break;
        case 2: { QObject* _r = _t->availableSourcesModel();
            if (_a[0]) *reinterpret_cast< QObject**>(_a[0]) = _r; }  break;
        case 3: { QString _r = _t->visibleNameForSource((*reinterpret_cast< const QString(*)>(_a[1])));
            if (_a[0]) *reinterpret_cast< QString*>(_a[0]) = _r; }  break;
        case 4: { bool _r = _t->isSourceConfigurable((*reinterpret_cast< const QString(*)>(_a[1])));
            if (_a[0]) *reinterpret_cast< bool*>(_a[0]) = _r; }  break;
        case 5: { QObject* _r = _t->createConfigurationDialog((*reinterpret_cast< const QString(*)>(_a[1])),(*reinterpret_cast< const QVariant(*)>(_a[2])));
            if (_a[0]) *reinterpret_cast< QObject**>(_a[0]) = _r; }  break;
        default: ;
        }
    }
}

const QMetaObjectExtraData Homerun::SourceRegistry::staticMetaObjectExtraData = {
    0,  qt_static_metacall 
};

const QMetaObject Homerun::SourceRegistry::staticMetaObject = {
    { &AbstractSourceRegistry::staticMetaObject, qt_meta_stringdata_Homerun__SourceRegistry,
      qt_meta_data_Homerun__SourceRegistry, &staticMetaObjectExtraData }
};

#ifdef Q_NO_DATA_RELOCATION
const QMetaObject &Homerun::SourceRegistry::getStaticMetaObject() { return staticMetaObject; }
#endif //Q_NO_DATA_RELOCATION

const QMetaObject *Homerun::SourceRegistry::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->metaObject : &staticMetaObject;
}

void *Homerun::SourceRegistry::qt_metacast(const char *_clname)
{
    if (!_clname) return 0;
    if (!strcmp(_clname, qt_meta_stringdata_Homerun__SourceRegistry))
        return static_cast<void*>(const_cast< SourceRegistry*>(this));
    return AbstractSourceRegistry::qt_metacast(_clname);
}

int Homerun::SourceRegistry::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = AbstractSourceRegistry::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 6)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 6;
    }
#ifndef QT_NO_PROPERTIES
      else if (_c == QMetaObject::ReadProperty) {
        void *_v = _a[0];
        switch (_id) {
        case 0: *reinterpret_cast< QVariantMap*>(_v) = favoriteModels(); break;
        case 1: *reinterpret_cast< QString*>(_v) = configFileName(); break;
        }
        _id -= 2;
    } else if (_c == QMetaObject::WriteProperty) {
        void *_v = _a[0];
        switch (_id) {
        case 1: setConfigFileName(*reinterpret_cast< QString*>(_v)); break;
        }
        _id -= 2;
    } else if (_c == QMetaObject::ResetProperty) {
        _id -= 2;
    } else if (_c == QMetaObject::QueryPropertyDesignable) {
        _id -= 2;
    } else if (_c == QMetaObject::QueryPropertyScriptable) {
        _id -= 2;
    } else if (_c == QMetaObject::QueryPropertyStored) {
        _id -= 2;
    } else if (_c == QMetaObject::QueryPropertyEditable) {
        _id -= 2;
    } else if (_c == QMetaObject::QueryPropertyUser) {
        _id -= 2;
    }
#endif // QT_NO_PROPERTIES
    return _id;
}

// SIGNAL 0
void Homerun::SourceRegistry::configFileNameChanged(const QString & _t1)
{
    void *_a[] = { 0, const_cast<void*>(reinterpret_cast<const void*>(&_t1)) };
    QMetaObject::activate(this, &staticMetaObject, 0, _a);
}
QT_END_MOC_NAMESPACE
